# Generated by Django 4.2.21 on 2025-08-22 14:59

import uuid

import django.core.validators
import django.db.models.deletion
import filer.fields.file
import select2.fields
from django.conf import settings
from django.db import migrations, models

import cohiva.utils.settings
import geno.model_fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("filer", "0017_image__transparent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "organization",
                    models.CharField(
                        blank=True,
                        help_text="Bei Privatpersonen: leer lassen",
                        max_length=100,
                        verbose_name="Organisation",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Bei Organisationen: Kontaktperson",
                        max_length=30,
                        verbose_name="Nachname",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=30, verbose_name="Vorname"),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Herr", "Herr"),
                            ("Frau", "Frau"),
                            ("Paar", "Familie/Paar"),
                            ("Org", "Organisation/Firma"),
                        ],
                        max_length=20,
                        verbose_name="Anrede",
                    ),
                ),
                (
                    "formal",
                    models.CharField(
                        choices=[("Du", "Du/Ihr"), ("Sie", "Sie")],
                        default=cohiva.utils.settings.get_default_formal_choice,
                        max_length=20,
                        verbose_name="Duzen",
                    ),
                ),
                (
                    "extra",
                    models.CharField(
                        blank=True,
                        help_text="z.B. c/o (optional)",
                        max_length=100,
                        verbose_name="Adresszusatz",
                    ),
                ),
                (
                    "street_name",
                    models.CharField(blank=True, max_length=100, verbose_name="Strasse"),
                ),
                (
                    "house_number",
                    models.CharField(blank=True, max_length=100, verbose_name="Hausnummer"),
                ),
                ("po_box", models.BooleanField(default=False, verbose_name="Postfach")),
                (
                    "po_box_number",
                    models.CharField(blank=True, max_length=100, verbose_name="Postfach Nr."),
                ),
                ("city_zipcode", models.CharField(blank=True, max_length=30, verbose_name="PLZ")),
                ("city_name", models.CharField(blank=True, max_length=100, verbose_name="Ort")),
                (
                    "country",
                    models.CharField(
                        blank=True, default="Schweiz", max_length=100, verbose_name="Land"
                    ),
                ),
                ("telephone", models.CharField(blank=True, max_length=30, verbose_name="Telefon")),
                ("mobile", models.CharField(blank=True, max_length=30, verbose_name="2. Telefon")),
                (
                    "email",
                    geno.model_fields.LowercaseEmailField(
                        blank=True, max_length=254, verbose_name="Email"
                    ),
                ),
                (
                    "email2",
                    geno.model_fields.LowercaseEmailField(
                        blank=True, max_length=254, verbose_name="2. Email"
                    ),
                ),
                (
                    "date_birth",
                    models.DateField(blank=True, null=True, verbose_name="Geburtsdatum"),
                ),
                (
                    "hometown",
                    models.CharField(blank=True, max_length=50, verbose_name="Heimatort"),
                ),
                (
                    "occupation",
                    models.CharField(blank=True, max_length=150, verbose_name="Beruf/Ausbildung"),
                ),
                (
                    "bankaccount",
                    models.CharField(blank=True, max_length=150, verbose_name="Kontoverbindung"),
                ),
                (
                    "interest_action",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Bank", "Überweisung auf angegebenes Bankkonto"),
                            ("Loan", "Dem Darlehen anrechnen"),
                            ("Deposit", "Dem Depositenkassenkonto anrechnen"),
                        ],
                        help_text="Für Darlehen. Leer = Nachfragen",
                        max_length=100,
                        verbose_name="Standard-Zinsvergütung",
                    ),
                ),
                (
                    "paymentslip",
                    models.BooleanField(
                        default=False,
                        help_text="Auswählen für Spezialfälle, welche manuell verarbeitet werden, z.B. Versand per Post statt E-Mail.",
                        verbose_name="Kein automatischer Versand",
                    ),
                ),
                (
                    "ignore_in_lists",
                    models.BooleanField(
                        default=False,
                        help_text="Auswählen für Personen, die nicht auf Listen wie Bewohnendenspiegel oder Sonnerie/Briefkasten etc. erscheinen sollen.",
                        verbose_name="Für Listen ignorieren",
                    ),
                ),
                ("active", models.BooleanField(db_index=True, default=True, verbose_name="Aktiv")),
                (
                    "gnucash_id",
                    models.CharField(
                        default=None,
                        max_length=30,
                        null=True,
                        unique=True,
                        verbose_name="GnuCash-ID",
                    ),
                ),
                (
                    "emonitor_id",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        null=True,
                        unique=True,
                        verbose_name="eMonitor-ID",
                    ),
                ),
                (
                    "random_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, unique=True, verbose_name="Zufalls-ID"
                    ),
                ),
                (
                    "login_permission",
                    models.BooleanField(
                        default=False,
                        verbose_name="Login auch ohne Mitgliedschaft/Mietvertrag erlauben",
                    ),
                ),
                (
                    "carddav_href",
                    models.CharField(blank=True, max_length=255, verbose_name="carddav_href"),
                ),
                (
                    "carddav_etag",
                    models.CharField(blank=True, max_length=255, verbose_name="carddav_etag"),
                ),
                (
                    "carddav_syncts",
                    models.DateTimeField(blank=True, null=True, verbose_name="carddav_syncts"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Adresse",
                "verbose_name_plural": "Adressen",
                "ordering": ["organization", "name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="Building",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Liegenschaft"),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=200, verbose_name="Beschreibung"),
                ),
                (
                    "team",
                    models.CharField(
                        blank=True,
                        help_text="Name des Rocket.Chat Teams für diese Liegenschaft (für automatische Zuordnung von Nutzer:innen).",
                        max_length=100,
                        verbose_name="Rocket.Chat Team",
                    ),
                ),
                ("active", models.BooleanField(default=True, verbose_name="Aktiv")),
            ],
            options={
                "verbose_name": "Liegenschaft",
                "verbose_name_plural": "Liegenschaften",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Child",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "presence",
                    models.DecimalField(
                        decimal_places=1, max_digits=2, verbose_name="Anwesenheit (Tage/Woche)"
                    ),
                ),
                (
                    "parents",
                    models.CharField(blank=True, max_length=200, verbose_name="Eltern(teil)"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Bemerkungen")),
                (
                    "emonitor_id",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        null=True,
                        unique=True,
                        verbose_name="eMonitor-ID",
                    ),
                ),
                (
                    "name",
                    select2.fields.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="address_child",
                        to="geno.address",
                        verbose_name="Person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Kind",
                "verbose_name_plural": "Kinder",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=255, verbose_name="Bezeichnung")),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("Email", "Email-Vorlage"),
                            ("Email-Subject", "Email-Betreff"),
                            ("Email-Sender", "Email-Absender"),
                            (
                                "OpenDocument",
                                "Dokument-Vorlage (OpenDocument-Datei mit Variablen)",
                            ),
                            ("File", "Datei"),
                        ],
                        default="Email",
                        max_length=50,
                        verbose_name="Typ",
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Für Dokument-Vorlagen leer lassen.",
                        verbose_name="Text",
                    ),
                ),
                (
                    "manual_creation_allowed",
                    models.BooleanField(
                        default=True, verbose_name="Manuelle Dokumenterstellung erlaubt?"
                    ),
                ),
                ("active", models.BooleanField(db_index=True, default=True, verbose_name="Aktiv")),
                (
                    "file",
                    filer.fields.file.FilerFileField(
                        blank=True,
                        help_text="Für Text-Vorlagen leer lassen.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="file_contenttemplate",
                        to="filer.file",
                        verbose_name="Datei",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vorlage",
                "verbose_name_plural": "Vorlagen",
            },
        ),
        migrations.CreateModel(
            name="ContentTemplateOption",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("share_statement_context", "Kontoauszug-Felder verwenden"),
                            ("billing_context", "Rechnungsstellung-Felder verwenden"),
                            ("qrbill_account", "IBAN für QR-Rechnung"),
                            ("qrbill_invoice_type_id", "QR-Kategorie-Code für Ref.Nr."),
                            ("qrbill_info", "QR-Infotext"),
                            (
                                "qrbill_rental_unit_in_extra_info",
                                "Mietobj. bei QR-Infotext anfügen",
                            ),
                            ("bill_text_default", "Standard-Rechnungstext"),
                            ("bill_amount_default", "Standard-Rechnungsbetrag"),
                            ("bill_text_memberflag_01", "Rechnungstext für Wohnen"),
                            ("bill_amount_memberflag_01", "Rechnungsbetrag für Wohnen"),
                            ("bill_text_memberflag_02", "Rechnungstext für Gewerbe/Arbeiten"),
                            ("bill_amount_memberflag_02", "Rechnungsbetrag für Gewerbe/Arbeiten"),
                            (
                                "bill_text_memberflag_03",
                                "Rechnungstext für Mitarbeit/Ideen umsetzen",
                            ),
                            (
                                "bill_amount_memberflag_03",
                                "Rechnungsbetrag für Mitarbeit/Ideen umsetzen",
                            ),
                            ("bill_text_memberflag_04", "Rechnungstext für Projekt unterstützen"),
                            (
                                "bill_amount_memberflag_04",
                                "Rechnungsbetrag für Projekt unterstützen",
                            ),
                            ("bill_text_memberflag_05", "Rechnungstext für Dranbleiben"),
                            ("bill_amount_memberflag_05", "Rechnungsbetrag für Dranbleiben"),
                            ("share_count_context_var", "Variablenname für Anz. Beteiligungen"),
                            ("share_count_sharetype", "Beteiligungstyp für Anz. Beteiligungen"),
                        ],
                        max_length=100,
                        verbose_name="Variable",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=100, verbose_name="Wert")),
            ],
            options={
                "verbose_name": "Vorlagenoption",
                "verbose_name_plural": "Vorlagenoptionen",
            },
        ),
        migrations.CreateModel(
            name="Contract",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "children_old",
                    models.CharField(blank=True, max_length=200, verbose_name="Kinder (ALT!)"),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("angeboten", "angeboten"),
                            ("unterzeichnet", "unterzeichnet"),
                            ("gekuendigt", "gekündigt"),
                            ("ungueltig", "ungültig"),
                        ],
                        max_length=50,
                        verbose_name="Status",
                    ),
                ),
                ("date", models.DateField(verbose_name="Datum Beginn")),
                (
                    "date_end",
                    models.DateField(
                        blank=True, default=None, null=True, verbose_name="Datum Ende"
                    ),
                ),
                ("note", models.CharField(blank=True, max_length=200, verbose_name="Zusatzinfo")),
                (
                    "emonitor_id",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        null=True,
                        unique=True,
                        verbose_name="eMonitor-ID",
                    ),
                ),
                (
                    "rent_reduction",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Mietzinsreduktion Nettomiete (Fr./Monat)",
                    ),
                ),
                (
                    "share_reduction",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Reduktion Pflichtanteilkapital (Fr.)",
                    ),
                ),
                (
                    "send_qrbill",
                    models.CharField(
                        choices=[
                            ("none", "Keine Rechnung per Mail verschicken"),
                            ("only_next", "Nur nächste Rechnung per Mail verschicken"),
                            ("always", "Rechung immer per Mail verschicken"),
                        ],
                        default="only_next",
                        max_length=50,
                        verbose_name="QR-Rechnung",
                    ),
                ),
                (
                    "bankaccount",
                    models.CharField(
                        blank=True,
                        help_text="Z.B. für Rückzahlung Nebenkosten",
                        max_length=150,
                        verbose_name="Kontoverbindung",
                    ),
                ),
                (
                    "billing_contract",
                    select2.fields.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="contract_billing_contracts",
                        to="geno.contract",
                        verbose_name="In Inkasso von diesem Vertrag integrieren",
                    ),
                ),
                (
                    "children",
                    models.ManyToManyField(
                        blank=True,
                        related_name="child_contracts",
                        to="geno.child",
                        verbose_name="Kinder",
                    ),
                ),
                (
                    "contractors",
                    models.ManyToManyField(
                        related_name="address_contracts",
                        to="geno.address",
                        verbose_name="Vertragspartner",
                    ),
                ),
                (
                    "main_contact",
                    select2.fields.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="address_main_contracts",
                        to="geno.address",
                        verbose_name="Kontaktperson/Hauptmieter*in",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vertrag",
                "verbose_name_plural": "Verträge",
                "ordering": ("date_end", "-date"),
                "permissions": (
                    (
                        "rental_contracts",
                        "Kann Mietverträge erstellen, NK-Abrechung, Pflichtanteile überprüfen",
                    ),
                    (
                        "rental_objects",
                        "Kann Mieter-/Objektespiegel erstellen und Mietobjekt-Dokumente erstellen",
                    ),
                    ("send_mail_rental", "Kann Versand an Mieter*innen erstellen"),
                ),
            },
        ),
        migrations.CreateModel(
            name="LookupTable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=255, verbose_name="Key")),
                ("lookup_type", models.CharField(max_length=20, verbose_name="Lookup type")),
                ("value", models.CharField(max_length=1000, verbose_name="Value")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("date_join", models.DateField(verbose_name="Eintritt")),
                ("date_leave", models.DateField(blank=True, null=True, verbose_name="Austritt")),
                ("flag_01", models.BooleanField(default=False)),
                ("flag_02", models.BooleanField(default=False)),
                ("flag_03", models.BooleanField(default=False)),
                ("flag_04", models.BooleanField(default=False)),
                ("flag_05", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True, verbose_name="Bemerkungen")),
                (
                    "name",
                    select2.fields.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.address",
                        verbose_name="Person/Organisation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mitglied",
                "verbose_name_plural": "Mitglieder",
                "ordering": ["name"],
                "permissions": (
                    ("canview_member", "Can see members"),
                    ("canview_member_overview", "Can see member overview"),
                    ("canview_member_mailinglists", "Can see member mailinglist information"),
                    ("canview_billing", "Can see billing/payment information"),
                    ("check_payments", "Kann Zahlungen überprüfen"),
                    ("transaction", "Kann Zahlungen erfassen"),
                    ("transaction_invoice", "Kann Rechnungen erstellen und bezahlte erfassen"),
                    ("admin_import", "Can import data"),
                    ("admin_maintenance", "Can run admin maintenance tasks"),
                    ("send_mail", "Can send emails to members/users"),
                    ("send_newmembers", "Kann neue Beitritte bestätigen"),
                    ("adit", "Kann Gegensprechanlage (ADIT) Daten sehen/bearbeiten"),
                ),
            },
        ),
        migrations.CreateModel(
            name="MemberAttributeType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=50, unique=True, verbose_name="Name")),
                ("description", models.CharField(max_length=200, verbose_name="Beschreibung")),
            ],
            options={
                "verbose_name": "Mitglieder Attribut Typ",
                "verbose_name_plural": "Mitglieder Attribut Typen",
            },
        ),
        migrations.CreateModel(
            name="RegistrationEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=255, verbose_name="Titel")),
                (
                    "description",
                    models.TextField(blank=True, default="", verbose_name="Beschreibung"),
                ),
                (
                    "confirmation_mail_sender",
                    models.CharField(
                        blank=True,
                        default=cohiva.utils.settings.get_default_email,
                        help_text="Leer lassen, falls kein Bestätigungsmail an die Anmeldenden gesendet werden soll.",
                        max_length=50,
                        verbose_name="Absender Bestätigungs-Mail",
                    ),
                ),
                (
                    "confirmation_mail_text",
                    models.TextField(
                        default=cohiva.utils.settings.get_default_mail_footer,
                        help_text="Dieser Text wird an den Standard-Mailtext «Hallo [name] / Du hast dich für den Anlass [titel] vom [datum] angemeldet.» angehängt",
                        verbose_name="Zusatztext Bestätigungs-Mail",
                    ),
                ),
                (
                    "publication_type",
                    models.CharField(
                        choices=[("internal", "Im Intranet"), ("public", "Öffentlich mit Link")],
                        default="internal",
                        max_length=30,
                        verbose_name="Anzeigemodus",
                    ),
                ),
                (
                    "publication_start",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Beginn Anmeldefrist"
                    ),
                ),
                (
                    "publication_end",
                    models.DateTimeField(blank=True, null=True, verbose_name="Ende Anmeldefrist"),
                ),
                ("active", models.BooleanField(db_index=True, default=True, verbose_name="Aktiv")),
                (
                    "enable_notes",
                    models.BooleanField(default=False, verbose_name="Kommentarfeld anzeigen?"),
                ),
                (
                    "enable_telephone",
                    models.BooleanField(
                        default=False,
                        verbose_name="Telefonnummer abfragen (zwingend wegen Covid-19)?",
                    ),
                ),
                (
                    "show_counter",
                    models.BooleanField(
                        default=True, verbose_name="Anzahl bisherige Anmeldungen anzeigen?"
                    ),
                ),
                (
                    "check1_label",
                    models.CharField(
                        blank=True,
                        help_text="Optionale Zusatzfragen zum ankreuzen",
                        max_length=100,
                        verbose_name="Checkbox-Frage 1",
                    ),
                ),
                (
                    "check2_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Checkbox-Frage 2"),
                ),
                (
                    "check3_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Checkbox-Frage 3"),
                ),
                (
                    "check4_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Checkbox-Frage 4"),
                ),
                (
                    "check5_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Checkbox-Frage 5"),
                ),
                (
                    "text1_label",
                    models.CharField(
                        blank=True,
                        help_text="Optionale Textfelder, zusätzlich zu den Standardfeldern Name, Vorname, Email, Telefon, Kommentar",
                        max_length=100,
                        verbose_name="Textfeld-Frage 1",
                    ),
                ),
                (
                    "text2_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Textfeld-Frage 2"),
                ),
                (
                    "text3_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Textfeld-Frage 3"),
                ),
                (
                    "text4_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Textfeld-Frage 4"),
                ),
                (
                    "text5_label",
                    models.CharField(blank=True, max_length=100, verbose_name="Textfeld-Frage 5"),
                ),
            ],
            options={
                "verbose_name": "Anmeldung-Anlass",
                "verbose_name_plural": "Anmeldung-Anlässe",
            },
        ),
        migrations.CreateModel(
            name="ShareType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=50, unique=True, verbose_name="Name")),
                ("description", models.CharField(max_length=200, verbose_name="Beschreibung")),
                (
                    "standard_interest",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Zinssatz gilt für alle Beteiligungen mit Zinssatz-Modus «Standard».",
                        max_digits=4,
                        verbose_name="Standard-Zinssatz",
                    ),
                ),
            ],
            options={
                "verbose_name": "Beteiligungstyp",
                "verbose_name_plural": "Beteiligungstypen",
            },
        ),
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "key_number",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Nummer des ausgegebenen Schlüssels.",
                        max_length=30,
                        verbose_name="Schlüsselnr.",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Bemerkungen")),
                (
                    "invitation_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Einladung geschickt am"
                    ),
                ),
                ("active", models.BooleanField(default=True, verbose_name="Aktiv")),
                (
                    "building",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.building",
                        verbose_name="Gebäude",
                    ),
                ),
                (
                    "name",
                    select2.fields.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="address_tenant",
                        to="geno.address",
                        verbose_name="Person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nutzer:in",
                "verbose_name_plural": "Nutzer:innen",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Share",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        choices=[("gefordert", "gefordert"), ("bezahlt", "bezahlt")],
                        max_length=50,
                        verbose_name="Status",
                    ),
                ),
                ("date", models.DateField(verbose_name="Datum Beginn")),
                (
                    "date_end",
                    models.DateField(
                        blank=True, default=None, null=True, verbose_name="Datum Ende"
                    ),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Jahre (bei Darlehen)",
                        null=True,
                        verbose_name="Laufzeit",
                    ),
                ),
                (
                    "date_due",
                    models.DateField(
                        blank=True,
                        help_text="Explizites Fälligkeitsdatum; leer=autom. mit Laufzeit berechnet",
                        null=True,
                        verbose_name="Fälligkeit",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1, verbose_name="Anzahl")),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Betrag pro Stück"
                    ),
                ),
                (
                    "interest_mode",
                    models.CharField(
                        choices=[("Standard", "Standard"), ("Manual", "Manuell")],
                        default="Standard",
                        help_text="Standard = Zinssatz von Beteiligungstyp übernehmen",
                        max_length=50,
                        verbose_name="Zinsatz-Modus",
                    ),
                ),
                (
                    "manual_interest",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Gilt, falls Zinssatz-Modus auf «Manuell» eingestellt ist.",
                        max_digits=4,
                        verbose_name="Zinssatz (manuell)",
                    ),
                ),
                (
                    "is_interest_credit",
                    models.BooleanField(default=False, verbose_name="Zinsgutschrift"),
                ),
                (
                    "is_pension_fund",
                    models.BooleanField(default=False, verbose_name="WEF-Guthaben (BVG/3.Säule)"),
                ),
                ("is_business", models.BooleanField(default=False, verbose_name="Gewerbe")),
                ("note", models.CharField(blank=True, max_length=200, verbose_name="Zusatzinfo")),
                (
                    "attached_to_contract",
                    select2.fields.ForeignKey(
                        blank=True,
                        help_text="Falls leer werden Anteilscheine automatisch als Pflichtanteile zu Verträgen zugewiesen",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="contract_attached_shares",
                        to="geno.contract",
                        verbose_name="Fixe Zuteilung als Pflichtanteil für Vertrag",
                    ),
                ),
                (
                    "name",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.address",
                        verbose_name="Person/Organisation",
                    ),
                ),
                (
                    "share_type",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.sharetype",
                        verbose_name="Beteiligungstyp",
                    ),
                ),
            ],
            options={
                "verbose_name": "Beteiligung",
                "verbose_name_plural": "Beteiligungen",
                "permissions": (
                    ("canview_share", "Can view shares"),
                    ("canview_share_overview", "Can see share overview"),
                    ("confirm_share", "Kann Betiligungen bestätigen"),
                    (
                        "share_interest_statments",
                        "Kann Zins-/Kontoauszüge erstellen und Zinsen anpassen",
                    ),
                    ("share_mailing", "Kann Mailing zu Beteiligungen erstellen"),
                ),
            },
        ),
        migrations.CreateModel(
            name="RentalUnit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=255, verbose_name="Nr.")),
                ("label", models.CharField(blank=True, max_length=50, verbose_name="Bezeichnung")),
                (
                    "label_short",
                    models.CharField(blank=True, max_length=50, verbose_name="Kurzbezeichnung"),
                ),
                (
                    "rental_type",
                    models.CharField(
                        choices=[
                            ("Wohnung", "Wohnung"),
                            ("Grosswohnung", "Grosswohnung"),
                            ("Jokerzimmer", "Jokerzimmer"),
                            ("Selbstausbau", "Selbstausbau"),
                            ("Kellerabteil", "Kellerabteil"),
                            ("Gewerbe", "Gewerbefläche"),
                            ("Lager", "Lagerraum"),
                            ("Hobby", "Hobbyraum"),
                            ("Gemeinschaft", "Gemeinschaftsräume/Diverses"),
                            ("Parkplatz", "Parkplatz"),
                        ],
                        max_length=50,
                        verbose_name="Typ",
                    ),
                ),
                ("floor", models.CharField(blank=True, max_length=50, verbose_name="Stockwerk")),
                (
                    "area",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Fläche (m2)",
                    ),
                ),
                (
                    "area_balcony",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Balkonfläche (m2)",
                    ),
                ),
                (
                    "area_add",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Zusatzfläche (m2)",
                    ),
                ),
                (
                    "height",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="Raumhöhe (m)"
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Volumen (m3)",
                    ),
                ),
                (
                    "rooms",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Anzahl Zimmer",
                    ),
                ),
                (
                    "min_occupancy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Mindestbelegung",
                    ),
                ),
                (
                    "nk",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Wird bei unvermieteten Gewerberäumen auch auf der Website angezeigt.",
                        max_digits=10,
                        null=True,
                        verbose_name="Nebenkosten (Fr.)",
                    ),
                ),
                (
                    "nk_electricity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Strompauschale (Fr.)",
                    ),
                ),
                (
                    "rent_total",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Die effektive Miete, welche in Rechnung gestellt wird.",
                        max_digits=10,
                        null=True,
                        verbose_name="Miete inkl. NK+Strom (Fr./Monat)",
                    ),
                ),
                (
                    "rent_year",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Diese Miete wird für Gewerberäume auf der Website angezeigt.",
                        max_digits=11,
                        null=True,
                        verbose_name="Nettomiete publiziert (Fr./Jahr)",
                    ),
                ),
                (
                    "depot",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Depot (Fr.)",
                    ),
                ),
                (
                    "share",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Anteilskapital (Fr.)",
                    ),
                ),
                ("note", models.CharField(blank=True, max_length=200, verbose_name="Zusatzinfo")),
                ("active", models.BooleanField(default=True, verbose_name="Aktiv")),
                (
                    "status",
                    models.CharField(default="Verfügbar", max_length=100, verbose_name="Status"),
                ),
                (
                    "svg_polygon",
                    models.TextField(blank=True, default="", verbose_name="SVG Polygon"),
                ),
                (
                    "description",
                    models.TextField(blank=True, default="", verbose_name="Beschreibung"),
                ),
                (
                    "adit_serial",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Mehrere Seriennr. durch Komma trennen.",
                        max_length=50,
                        verbose_name="ADIT-Seriennr.",
                    ),
                ),
                (
                    "building",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.building",
                        verbose_name="Liegenschaft",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mietobjekt",
                "verbose_name_plural": "Mietobjekte",
                "ordering": ["building__name", "name"],
                "unique_together": {("name", "building")},
            },
        ),
        migrations.CreateModel(
            name="RegistrationSlot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "name",
                    models.DateTimeField(
                        help_text="Falls keine spezifische Uhrzeit, 00:00 angeben",
                        verbose_name="Anlass/Termin",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Falls ausgefüllt, wird anstelle des Datums dieser Text im Formular angezeigt.",
                        max_length=100,
                        verbose_name="Alternativer Text",
                    ),
                ),
                (
                    "max_places",
                    models.IntegerField(
                        default=-1,
                        help_text="Für unbeschränkte Anzahl -1 (minus 1) eingeben.",
                        verbose_name="Max. Anzahl Plätze",
                    ),
                ),
                (
                    "event",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.registrationevent",
                        verbose_name="Anlass",
                    ),
                ),
                (
                    "is_backup_for",
                    models.OneToOneField(
                        blank=True,
                        help_text="Falls gesetzt, wird dieser Termin erst angeboten, wenn der hier angegebene Termin keine freien Plätze mehr hat.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backup_slot",
                        to="geno.registrationslot",
                        verbose_name="Ist Backup für Termin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anmeldung-Termin",
                "verbose_name_plural": "Anmeldung-Termine",
            },
        ),
        migrations.CreateModel(
            name="Registration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=30, verbose_name="Nachname")),
                ("first_name", models.CharField(max_length=30, verbose_name="Vorname")),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                (
                    "telephone",
                    models.CharField(
                        blank=True,
                        help_text="Angabe zwingend wegen COVID-19 Massnahmen",
                        max_length=30,
                        verbose_name="Telefon",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Kommentar")),
                ("check1", models.BooleanField(default=False, verbose_name="Checkbox 1")),
                ("check2", models.BooleanField(default=False, verbose_name="Checkbox 2")),
                ("check3", models.BooleanField(default=False, verbose_name="Checkbox 3")),
                ("check4", models.BooleanField(default=False, verbose_name="Checkbox 4")),
                ("check5", models.BooleanField(default=False, verbose_name="Checkbox 5")),
                ("text1", models.CharField(blank=True, max_length=100, verbose_name="Textfeld 1")),
                ("text2", models.CharField(blank=True, max_length=100, verbose_name="Textfeld 2")),
                ("text3", models.CharField(blank=True, max_length=100, verbose_name="Textfeld 3")),
                ("text4", models.CharField(blank=True, max_length=100, verbose_name="Textfeld 4")),
                ("text5", models.CharField(blank=True, max_length=100, verbose_name="Textfeld 5")),
                (
                    "slot",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.registrationslot",
                        verbose_name="Datum/Zeit Beginn",
                    ),
                ),
            ],
            options={
                "verbose_name": "Anmeldung",
                "verbose_name_plural": "Anmeldungen",
            },
        ),
        migrations.CreateModel(
            name="MemberAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("date", models.DateField(blank=True, null=True, verbose_name="Datum")),
                ("value", models.CharField(max_length=100, verbose_name="Wert")),
                (
                    "attribute_type",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.memberattributetype",
                        verbose_name="Attributtyp",
                    ),
                ),
                (
                    "member",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.member",
                        verbose_name="Mitglied",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mitglieder Attribut",
                "verbose_name_plural": "Mitglieder Attribute",
            },
        ),
        migrations.CreateModel(
            name="InvoiceCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=50, verbose_name="Name")),
                (
                    "reference_id",
                    models.SmallIntegerField(
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(89),
                        ],
                        verbose_name="Kategorie-Code für Referenznummer",
                    ),
                ),
                ("note", models.CharField(blank=True, max_length=255, verbose_name="Bemerkung")),
                (
                    "linked_object_type",
                    models.CharField(
                        choices=[("Address", "Adresse"), ("Contract", "Vertrag")],
                        default="Address",
                        max_length=50,
                        verbose_name="Rechnung verknüpft mit",
                    ),
                ),
                (
                    "income_account",
                    models.CharField(
                        default="3000", max_length=50, verbose_name="Kontonummer Ertrag"
                    ),
                ),
                (
                    "receivables_account",
                    models.CharField(
                        default="1102", max_length=50, verbose_name="Kontonummer Forderungen"
                    ),
                ),
                (
                    "manual_allowed",
                    models.BooleanField(
                        default=False, verbose_name="Manuelle Rechnungsstellung erlaubt"
                    ),
                ),
                ("active", models.BooleanField(default=True, verbose_name="Aktiv")),
                (
                    "email_template",
                    select2.fields.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="geno.contenttemplate",
                        verbose_name="Email-Vorlage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rechnungstyp",
                "verbose_name_plural": "Rechnungstypen",
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=1000, verbose_name="Beschreibung")),
                (
                    "invoice_type",
                    models.CharField(
                        choices=[("Invoice", "Rechnung"), ("Payment", "Einzahlung")],
                        db_index=True,
                        default="Invoice",
                        max_length=50,
                        verbose_name="Typ",
                    ),
                ),
                ("date", models.DateField(verbose_name="Datum")),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Betrag (Fr.)"
                    ),
                ),
                (
                    "consolidated",
                    models.BooleanField(db_index=True, default=False, verbose_name="Konsolidiert"),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=150, verbose_name="Transaktions-ID"
                    ),
                ),
                (
                    "reference_nr",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, verbose_name="Referenz-Nr."
                    ),
                ),
                (
                    "additional_info",
                    models.CharField(blank=True, max_length=255, verbose_name="Zusatzinfos"),
                ),
                (
                    "year",
                    models.IntegerField(
                        blank=True, db_index=True, null=True, verbose_name="Rechnung für Jahr"
                    ),
                ),
                (
                    "month",
                    models.IntegerField(
                        blank=True, db_index=True, null=True, verbose_name="Rechnung für Monat"
                    ),
                ),
                (
                    "is_additional_invoice",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="Zusatzrechnung zu einer Hauptrechnung?",
                    ),
                ),
                ("active", models.BooleanField(db_index=True, default=True, verbose_name="Aktiv")),
                (
                    "gnc_transaction",
                    models.CharField(max_length=1024, verbose_name="GNC transaction"),
                ),
                (
                    "gnc_account",
                    models.CharField(blank=True, max_length=50, verbose_name="GNC account"),
                ),
                (
                    "gnc_account_receivables",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="GNC account receivables"
                    ),
                ),
                (
                    "contract",
                    select2.fields.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.contract",
                        verbose_name="Vertrag",
                    ),
                ),
                (
                    "invoice_category",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.invoicecategory",
                        verbose_name="Kategorie",
                    ),
                ),
                (
                    "person",
                    select2.fields.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.address",
                        verbose_name="Person/Organisation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rechnung",
                "verbose_name_plural": "Rechnungen",
            },
        ),
        migrations.CreateModel(
            name="GenericAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(db_index=True, max_length=250, verbose_name="Name")),
                ("date", models.DateField(blank=True, null=True, verbose_name="Datum")),
                ("value", models.CharField(max_length=100, verbose_name="Wert")),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                        verbose_name="Verknüpft mit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribut",
                "verbose_name_plural": "Attribute",
            },
        ),
        migrations.CreateModel(
            name="DocumentType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("invoice", "invoice"),
                            ("contract_check", "contract_check"),
                            ("loanreminder", "loanreminder"),
                            ("contract_letter", "contract_letter"),
                            ("contract", "contract"),
                            ("statement", "statement"),
                            ("memberfee", "memberfee"),
                            ("shareconfirm", "shareconfirm"),
                            ("shareconfirm_req", "shareconfirm_req"),
                            ("memberfinanz", "memberfinanz"),
                            ("memberletter", "memberletter"),
                        ],
                        max_length=50,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                ("description", models.CharField(max_length=200, verbose_name="Beschreibung")),
                (
                    "template_file",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Dateiname Vorlage (alte Methode)"
                    ),
                ),
                ("active", models.BooleanField(default=True, verbose_name="Aktiv")),
                (
                    "template",
                    select2.fields.ForeignKey(
                        blank=True,
                        help_text="OpenDocument Dokumentvorlage",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.contenttemplate",
                        verbose_name="Vorlage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dokumenttyp",
                "verbose_name_plural": "Dokumenttypen",
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, verbose_name="Comment")),
                ("ts_created", models.DateTimeField(auto_now_add=True, verbose_name="Erstellt")),
                ("ts_modified", models.DateTimeField(auto_now=True, verbose_name="Geändert")),
                ("name", models.CharField(max_length=250, verbose_name="Name")),
                ("data", models.TextField(verbose_name="Data")),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                        verbose_name="Verknüpft mit",
                    ),
                ),
                (
                    "doctype",
                    select2.fields.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geno.documenttype",
                        verbose_name="Dokumenttyp",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dokument",
                "verbose_name_plural": "Dokumente",
                "permissions": (
                    ("regenerate_document", "Can regenerate documents"),
                    ("tools_odt2pdf", "Kann ODT in PDFs umwandeln"),
                    ("tools_webstamp", "Kann PDFs frankieren"),
                ),
            },
        ),
        migrations.AddField(
            model_name="contract",
            name="rental_units",
            field=models.ManyToManyField(
                related_name="rentalunit_contracts",
                to="geno.rentalunit",
                verbose_name="Mietobjekt(e)",
            ),
        ),
        migrations.AddField(
            model_name="contenttemplate",
            name="template_context",
            field=models.ManyToManyField(
                blank=True,
                related_name="contenttemplates",
                to="geno.contenttemplateoption",
                verbose_name="Kontext-Optionen",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoicecategory",
            constraint=models.CheckConstraint(
                check=models.Q(("reference_id__gt", 0), ("reference_id__lt", 90)),
                name="geno_invoicecategory_reference_id_range",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("person__isnull", True), ("contract__isnull", False)),
                    models.Q(("person__isnull", False), ("contract__isnull", True)),
                    _connector="OR",
                ),
                name="either_person_or_contract",
            ),
        ),
        migrations.AddConstraint(
            model_name="genericattribute",
            constraint=models.UniqueConstraint(
                fields=("name", "content_type", "object_id"),
                name="unique_content_object_attribute_name",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="address",
            unique_together={("organization", "name", "first_name", "email")},
        ),
    ]
